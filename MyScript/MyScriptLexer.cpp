
// Generated from E:\VSProjects\MyScript\MyScript\MyScript.g4 by ANTLR 4.7


#include "MyScriptLexer.h"


using namespace antlr4;


MyScriptLexer::MyScriptLexer(CharStream *input) : Lexer(input) {
  _interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

MyScriptLexer::~MyScriptLexer() {
  delete _interpreter;
}

std::string MyScriptLexer::getGrammarFileName() const {
  return "MyScript.g4";
}

const std::vector<std::string>& MyScriptLexer::getRuleNames() const {
  return _ruleNames;
}

const std::vector<std::string>& MyScriptLexer::getChannelNames() const {
  return _channelNames;
}

const std::vector<std::string>& MyScriptLexer::getModeNames() const {
  return _modeNames;
}

const std::vector<std::string>& MyScriptLexer::getTokenNames() const {
  return _tokenNames;
}

dfa::Vocabulary& MyScriptLexer::getVocabulary() const {
  return _vocabulary;
}

const std::vector<uint16_t> MyScriptLexer::getSerializedATN() const {
  return _serializedATN;
}

const atn::ATN& MyScriptLexer::getATN() const {
  return _atn;
}




// Static vars and initialization.
std::vector<dfa::DFA> MyScriptLexer::_decisionToDFA;
atn::PredictionContextCache MyScriptLexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN MyScriptLexer::_atn;
std::vector<uint16_t> MyScriptLexer::_serializedATN;

std::vector<std::string> MyScriptLexer::_ruleNames = {
  u8"T__0", u8"T__1", u8"T__2", u8"WS", u8"LINE_COMMENT", u8"COMMENT", u8"ID", 
  u8"STRING", u8"NUM"
};

std::vector<std::string> MyScriptLexer::_channelNames = {
  "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
};

std::vector<std::string> MyScriptLexer::_modeNames = {
  u8"DEFAULT_MODE"
};

std::vector<std::string> MyScriptLexer::_literalNames = {
  "", u8"'''", u8"'('", u8"')'"
};

std::vector<std::string> MyScriptLexer::_symbolicNames = {
  "", "", "", "", u8"WS", u8"LINE_COMMENT", u8"COMMENT", u8"ID", u8"STRING", 
  u8"NUM"
};

dfa::Vocabulary MyScriptLexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> MyScriptLexer::_tokenNames;

MyScriptLexer::Initializer::Initializer() {
  // This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there.
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  _serializedATN = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
    0x2, 0xb, 0x62, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
    0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
    0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 0x3, 
    0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x5, 0x6, 
    0x5, 0x1d, 0xa, 0x5, 0xd, 0x5, 0xe, 0x5, 0x1e, 0x3, 0x5, 0x3, 0x5, 0x3, 
    0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x7, 0x6, 0x27, 0xa, 0x6, 0xc, 0x6, 
    0xe, 0x6, 0x2a, 0xb, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
    0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x7, 0x7, 0x34, 0xa, 0x7, 0xc, 0x7, 
    0xe, 0x7, 0x37, 0xb, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 
    0x7, 0x3, 0x8, 0x6, 0x8, 0x3f, 0xa, 0x8, 0xd, 0x8, 0xe, 0x8, 0x40, 0x3, 
    0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x7, 0x9, 0x47, 0xa, 0x9, 0xc, 0x9, 
    0xe, 0x9, 0x4a, 0xb, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0xa, 0x3, 0xa, 0x7, 
    0xa, 0x50, 0xa, 0xa, 0xc, 0xa, 0xe, 0xa, 0x53, 0xb, 0xa, 0x3, 0xa, 0x3, 
    0xa, 0x6, 0xa, 0x57, 0xa, 0xa, 0xd, 0xa, 0xe, 0xa, 0x58, 0x3, 0xa, 0x3, 
    0xa, 0x6, 0xa, 0x5d, 0xa, 0xa, 0xd, 0xa, 0xe, 0xa, 0x5e, 0x5, 0xa, 0x61, 
    0xa, 0xa, 0x5, 0x28, 0x35, 0x48, 0x2, 0xb, 0x3, 0x3, 0x5, 0x4, 0x7, 
    0x5, 0x9, 0x6, 0xb, 0x7, 0xd, 0x8, 0xf, 0x9, 0x11, 0xa, 0x13, 0xb, 0x3, 
    0x2, 0x8, 0x5, 0x2, 0xb, 0xc, 0xf, 0xf, 0x22, 0x22, 0xc, 0x2, 0x23, 
    0x23, 0x27, 0x28, 0x2c, 0x2d, 0x2f, 0x2f, 0x31, 0x31, 0x3e, 0x41, 0x43, 
    0x5c, 0x60, 0x61, 0x63, 0x7c, 0x80, 0x80, 0x3, 0x2, 0x33, 0x3b, 0x3, 
    0x2, 0x32, 0x3b, 0x3, 0x2, 0x32, 0x32, 0x3, 0x2, 0x30, 0x30, 0x2, 0x6c, 
    0x2, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 0x2, 0x2, 0x2, 0x2, 0x7, 
    0x3, 0x2, 0x2, 0x2, 0x2, 0x9, 0x3, 0x2, 0x2, 0x2, 0x2, 0xb, 0x3, 0x2, 
    0x2, 0x2, 0x2, 0xd, 0x3, 0x2, 0x2, 0x2, 0x2, 0xf, 0x3, 0x2, 0x2, 0x2, 
    0x2, 0x11, 0x3, 0x2, 0x2, 0x2, 0x2, 0x13, 0x3, 0x2, 0x2, 0x2, 0x3, 0x15, 
    0x3, 0x2, 0x2, 0x2, 0x5, 0x17, 0x3, 0x2, 0x2, 0x2, 0x7, 0x19, 0x3, 0x2, 
    0x2, 0x2, 0x9, 0x1c, 0x3, 0x2, 0x2, 0x2, 0xb, 0x22, 0x3, 0x2, 0x2, 0x2, 
    0xd, 0x2f, 0x3, 0x2, 0x2, 0x2, 0xf, 0x3e, 0x3, 0x2, 0x2, 0x2, 0x11, 
    0x42, 0x3, 0x2, 0x2, 0x2, 0x13, 0x60, 0x3, 0x2, 0x2, 0x2, 0x15, 0x16, 
    0x7, 0x29, 0x2, 0x2, 0x16, 0x4, 0x3, 0x2, 0x2, 0x2, 0x17, 0x18, 0x7, 
    0x2a, 0x2, 0x2, 0x18, 0x6, 0x3, 0x2, 0x2, 0x2, 0x19, 0x1a, 0x7, 0x2b, 
    0x2, 0x2, 0x1a, 0x8, 0x3, 0x2, 0x2, 0x2, 0x1b, 0x1d, 0x9, 0x2, 0x2, 
    0x2, 0x1c, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x1d, 0x1e, 0x3, 0x2, 0x2, 0x2, 
    0x1e, 0x1c, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x1f, 0x3, 0x2, 0x2, 0x2, 0x1f, 
    0x20, 0x3, 0x2, 0x2, 0x2, 0x20, 0x21, 0x8, 0x5, 0x2, 0x2, 0x21, 0xa, 
    0x3, 0x2, 0x2, 0x2, 0x22, 0x23, 0x7, 0x31, 0x2, 0x2, 0x23, 0x24, 0x7, 
    0x31, 0x2, 0x2, 0x24, 0x28, 0x3, 0x2, 0x2, 0x2, 0x25, 0x27, 0xb, 0x2, 
    0x2, 0x2, 0x26, 0x25, 0x3, 0x2, 0x2, 0x2, 0x27, 0x2a, 0x3, 0x2, 0x2, 
    0x2, 0x28, 0x29, 0x3, 0x2, 0x2, 0x2, 0x28, 0x26, 0x3, 0x2, 0x2, 0x2, 
    0x29, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x2a, 0x28, 0x3, 0x2, 0x2, 0x2, 0x2b, 
    0x2c, 0x7, 0xc, 0x2, 0x2, 0x2c, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x2d, 0x2e, 
    0x8, 0x6, 0x2, 0x2, 0x2e, 0xc, 0x3, 0x2, 0x2, 0x2, 0x2f, 0x30, 0x7, 
    0x31, 0x2, 0x2, 0x30, 0x31, 0x7, 0x2c, 0x2, 0x2, 0x31, 0x35, 0x3, 0x2, 
    0x2, 0x2, 0x32, 0x34, 0xb, 0x2, 0x2, 0x2, 0x33, 0x32, 0x3, 0x2, 0x2, 
    0x2, 0x34, 0x37, 0x3, 0x2, 0x2, 0x2, 0x35, 0x36, 0x3, 0x2, 0x2, 0x2, 
    0x35, 0x33, 0x3, 0x2, 0x2, 0x2, 0x36, 0x38, 0x3, 0x2, 0x2, 0x2, 0x37, 
    0x35, 0x3, 0x2, 0x2, 0x2, 0x38, 0x39, 0x7, 0x2c, 0x2, 0x2, 0x39, 0x3a, 
    0x7, 0x31, 0x2, 0x2, 0x3a, 0x3b, 0x3, 0x2, 0x2, 0x2, 0x3b, 0x3c, 0x8, 
    0x7, 0x2, 0x2, 0x3c, 0xe, 0x3, 0x2, 0x2, 0x2, 0x3d, 0x3f, 0x9, 0x3, 
    0x2, 0x2, 0x3e, 0x3d, 0x3, 0x2, 0x2, 0x2, 0x3f, 0x40, 0x3, 0x2, 0x2, 
    0x2, 0x40, 0x3e, 0x3, 0x2, 0x2, 0x2, 0x40, 0x41, 0x3, 0x2, 0x2, 0x2, 
    0x41, 0x10, 0x3, 0x2, 0x2, 0x2, 0x42, 0x48, 0x7, 0x24, 0x2, 0x2, 0x43, 
    0x44, 0x7, 0x5e, 0x2, 0x2, 0x44, 0x47, 0x7, 0x24, 0x2, 0x2, 0x45, 0x47, 
    0xb, 0x2, 0x2, 0x2, 0x46, 0x43, 0x3, 0x2, 0x2, 0x2, 0x46, 0x45, 0x3, 
    0x2, 0x2, 0x2, 0x47, 0x4a, 0x3, 0x2, 0x2, 0x2, 0x48, 0x49, 0x3, 0x2, 
    0x2, 0x2, 0x48, 0x46, 0x3, 0x2, 0x2, 0x2, 0x49, 0x4b, 0x3, 0x2, 0x2, 
    0x2, 0x4a, 0x48, 0x3, 0x2, 0x2, 0x2, 0x4b, 0x4c, 0x7, 0x24, 0x2, 0x2, 
    0x4c, 0x12, 0x3, 0x2, 0x2, 0x2, 0x4d, 0x51, 0x9, 0x4, 0x2, 0x2, 0x4e, 
    0x50, 0x9, 0x5, 0x2, 0x2, 0x4f, 0x4e, 0x3, 0x2, 0x2, 0x2, 0x50, 0x53, 
    0x3, 0x2, 0x2, 0x2, 0x51, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x51, 0x52, 0x3, 
    0x2, 0x2, 0x2, 0x52, 0x61, 0x3, 0x2, 0x2, 0x2, 0x53, 0x51, 0x3, 0x2, 
    0x2, 0x2, 0x54, 0x61, 0x9, 0x6, 0x2, 0x2, 0x55, 0x57, 0x9, 0x5, 0x2, 
    0x2, 0x56, 0x55, 0x3, 0x2, 0x2, 0x2, 0x57, 0x58, 0x3, 0x2, 0x2, 0x2, 
    0x58, 0x56, 0x3, 0x2, 0x2, 0x2, 0x58, 0x59, 0x3, 0x2, 0x2, 0x2, 0x59, 
    0x5a, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x5c, 0x9, 0x7, 0x2, 0x2, 0x5b, 0x5d, 
    0x9, 0x5, 0x2, 0x2, 0x5c, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x5d, 0x5e, 0x3, 
    0x2, 0x2, 0x2, 0x5e, 0x5c, 0x3, 0x2, 0x2, 0x2, 0x5e, 0x5f, 0x3, 0x2, 
    0x2, 0x2, 0x5f, 0x61, 0x3, 0x2, 0x2, 0x2, 0x60, 0x4d, 0x3, 0x2, 0x2, 
    0x2, 0x60, 0x54, 0x3, 0x2, 0x2, 0x2, 0x60, 0x56, 0x3, 0x2, 0x2, 0x2, 
    0x61, 0x14, 0x3, 0x2, 0x2, 0x2, 0xd, 0x2, 0x1e, 0x28, 0x35, 0x40, 0x46, 
    0x48, 0x51, 0x58, 0x5e, 0x60, 0x3, 0x8, 0x2, 0x2, 
  };

  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

MyScriptLexer::Initializer MyScriptLexer::_init;
